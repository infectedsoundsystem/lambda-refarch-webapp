AWSTemplateFormatVersion: "2010-09-09"
Description: SAM template for Voting App serverless application resources
Transform: 'AWS::Serverless-2016-10-31'

Resources:

    CustomiseStaticFilesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ../lambda-packages/customise-static-files
            Handler: customise_static_files.lambda_handler
            Runtime: python3.6
            AutoPublishAlias: prod
            DeploymentPreference:
                Type: AllAtOnce
            Policies: 
                - AmazonS3FullAccess

    ReceiveVoteFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ../lambda-packages/receive-vote
            Handler: receive_vote.lambda_handler
            Runtime: python3.6
            AutoPublishAlias: prod
            DeploymentPreference:
                Type: AllAtOnce
            Policies: AmazonDynamoDBFullAccess
            Environment:
                Variables:
                    TABLE_NAME: !Ref VoteRecordDynamoDBTable
            Events:
                PostEvent:
                    Type: Api
                    Properties:
                        RestApiId: !Ref ReceiveVoteApi
                        Path: /vote
                        Method: post

    ReceiveVoteApi:
        Type: AWS::Serverless::Api
        Properties:
            DefinitionUri: ./swagger.yaml
            StageName: Prod
            Variables:
                LambdaFunctionName: !Ref ReceiveVoteFunction

    # Necessary due to issue with Lambda function not being given perms to allow
    # API Gateway to access it, see:
    # https://github.com/awslabs/serverless-application-model/issues/59
    ReceiveLambdaPermissions:
        Type: AWS::Lambda::Permission
        DependsOn:
            - ReceiveVoteFunction
            - ReceiveVoteApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref ReceiveVoteFunction
            Principal: apigateway.amazonaws.com

    AggregateVoteFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ../lambda-packages/aggregate-votes
            Handler: aggregate_votes.lambda_handler
            Runtime: python3.6
            AutoPublishAlias: prod
            DeploymentPreference:
                Type: AllAtOnce
            Policies:
                - AWSLambdaDynamoDBExecutionRole
                - AmazonDynamoDBFullAccess
            Environment:
                Variables:
                    TABLE_NAME: !Ref VoteAggregateDynamoDBTable
            Events:
                Stream:
                    Type: DynamoDB
                    Properties:
                        BatchSize: 100
                        StartingPosition: LATEST
                        Stream: !GetAtt VoteRecordDynamoDBTable.StreamArn

    VoteRecordDynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                -
                    AttributeName: VotedFor
                    AttributeType: S
            KeySchema:
                -
                    AttributeName: VotedFor
                    KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 9
            StreamSpecification:
                StreamViewType: NEW_IMAGE

    VoteAggregateDynamoDBTable:
        Type: AWS::Serverless::SimpleTable
        Properties:
            PrimaryKey:
                Name: VotedFor
                Type: String
            ProvisionedThroughput:
                ReadCapacityUnits: 13
                WriteCapacityUnits: 2

    CognitoIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            IdentityPoolName: !ImportValue VoteSubdomainParameter
            AllowUnauthenticatedIdentities: true

    CognitoIdentityPoolAuthRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Federated: "cognito-identity.amazonaws.com"
                        Action: "sts:AssumeRoleWithWebIdentity"

    CognitoIdentityPoolUnauthRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Federated: "cognito-identity.amazonaws.com"
                        Action: "sts:AssumeRoleWithWebIdentity"
            Policies:
                -
                    PolicyName: "dynamodbread"
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Action:
                                    - dynamodb:GetItem
                                    - dynamodb:Scan
                                Effect: Allow
                                Resource: !Join [ "", ["arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref VoteAggregateDynamoDBTable]]

    CognitoIdentityPoolAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref CognitoIdentityPool
            Roles:
                authenticated: !GetAtt CognitoIdentityPoolAuthRole.Arn
                unauthenticated: !GetAtt CognitoIdentityPoolUnauthRole.Arn

    CustomiseStaticFilesCustomResource:
        Type: Custom::LambdaFunction
        Properties:
            ServiceToken: !GetAtt CustomiseStaticFilesFunction.Arn
            IdentityPoolId: !Ref CognitoIdentityPool
            VoteAggregateTable: !Ref VoteAggregateDynamoDBTable
            ApiGatewayId: !Ref ReceiveVoteApi
            S3Bucket: !ImportValue VoteWebsiteBucketName
            S3Key: "refresh.js"
